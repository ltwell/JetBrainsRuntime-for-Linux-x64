name: jbr-linux-x64

on:
  push:
    branches: 
      - master
  watch:
    types: [started]
  schedule:
    - cron: 0 0 1 * *

jobs:
  build:
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id
    steps:
    - name: Clone Repository
      uses: actions/checkout@v1

    - name: Show CPU Model and Free Space
      run: |
        echo -e "Total CPU cores\t: $(nproc)"
        cat /proc/cpuinfo | grep 'model name'
        free -h

    - name: Init Build Dependencies
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi $(docker images -q)
        sudo -E apt-get remove -y --purge azure-cli ghc zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
        sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /usr/lib/jvm/
        sudo -E apt-get update -y
        sudo -E apt-get install -y ant asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake curl device-tree-compiler flex g++-multilib gawk gcc-multilib gettext git git-core gperf haveged ksh lib32gcc1 libasound2-dev libavcodec-dev libavformat-dev libc6-dev-i386 libcups2-dev libelf-dev libfontconfig1-dev libgl1-mesa-dev libglib2.0-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgtk2.0-dev libgtk-3-dev libjpeg-dev libncurses5-dev libpng-dev libreadline-dev libssl-dev libtool libudev-dev libx11-dev libxext-dev libxml2-dev libxrandr-dev libxrender-dev libxslt1-dev libxt-dev libxtst-dev libxxf86vm-dev libz-dev lrzsz make mercurial msmtp nano openjdk-11-jdk p7zip p7zip-full patch pkg-config python3 python3-pip python3-ply qemu-utils ruby scons subversion texinfo uglifyjs unzip upx vim wget x11proto-core-dev x11proto-xf86vidmode-dev xmlto zlib1g-dev
        sudo -E apt-get autoremove -y --purge
        sudo -E apt-get clean -y

    - name: Prepare Source
      run: |
        git config --global core.autocrlf input
        hg clone http://hg.openjdk.java.net/openjfx/11-dev/rt
        git clone -b master --single-branch https://github.com/JetBrains/JetBrainsRuntime.git
        cd JetBrainsRuntime
        mv ../idea.patch ./
        patch -p1 < idea.patch

    - name: Compile OpenJFX
      env:
        JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
        JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
      run: |
        cd rt
        chmod a+x gradlew
        ./gradlew -PCOMPILE_WEBKIT=true

    - name: Compile JetBrainsRuntime
      env:
        JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
        JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
      run: |
        cd JetBrainsRuntime
        sh ./configure --disable-warnings-as-errors  --with-import-modules=../rt/build/modular-sdk
        make images

    - name: Collect Artifact
      run: |
        cd JetBrainsRuntime/build/linux-x86_64-normal-server-release/images
        mv jdk jbr
        zip -r jbr-linux-x64.zip ./jbr/*
        mv jbr-linux-x64.zip ../../../../

    - name: Assemble Artifact
      id: assemble_artifact
      env:
        TZ: Asia/Shanghai
      run: |
        time=$(date +%Y%m%d%H%M)
        release_tag=$time
        release_name="jbr-linux-x64-$time"
        echo "##[set-output name=release_name;]$release_name"
        echo "##[set-output name=release_tag;]$release_tag"

    - name: Upload Artifact
      uses: actions/upload-artifact@master
      with:
        name: ${{ steps.assemble_artifact.outputs.release_tag }}
        path: jbr-linux-x64.zip

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.assemble_artifact.outputs.release_tag }}
        release_name:  ${{ steps.assemble_artifact.outputs.release_name }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./jbr-linux-x64.zip
        asset_name: ${{ steps.assemble_artifact.outputs.release_name }}.zip
        asset_content_type: application/zip

